#include "HourlyForecast.h"

HourlyForecast::HourlyForecast()
{
    for (int i = 0; i < 24; i++)
    {
        _hourly_cloud_float[i] = 999;
        _hourly_dew_float[i] = 999;
        _hourly_fxtime_str[i] = "no_init";
        _hourly_humidity_float[i] = 999;
        _hourly_icon_int[i] = 999;
        _hourly_pop_float[i] = 999;
        _hourly_precip_float[i] = 999;
        _hourly_pressure_float[i] = 9999;
        _hourly_temp_int[i] = 999;
        _hourly_text_str[i] = "no_init";
        _hourly_wind360_int[i] = 999;
        _hourly_winddir_str[i] = "no_init";
        _hourly_windscale_str[i] = "no_init";
        _hourly_windspeed_int[i] = 999;
    }
}

bool HourlyForecast::get()
{
    String url = "https://devapi.qweather.com/v7/weather/24h";
    return getFrom(url);
}

void HourlyForecast::_parseNowJson(String payload) // 解析json信息
{
    // String input;

    DynamicJsonDocument doc(12288); // generated by https://arduinojson.org/v6/assistant/

    DeserializationError error = deserializeJson(doc, payload);

    if (error)
    {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return;
    }
    _response_code = doc["code"].as<String>();
    _last_update_str = doc["updateTime"].as<String>();
    // const char *code = doc["code"];             // "200"
    // const char *updateTime = doc["updateTime"]; // "2021-02-16T13:35+08:00"
    // const char *fxLink = doc["fxLink"];         // "http://hfx.link/2ax1"
    int i = 0;
    for (JsonObject hourly_item : doc["hourly"].as<JsonArray>())
    {

        // const char *hourly_item_fxTime = hourly_item["fxTime"];       // "2021-02-16T15:00+08:00", ...
        _hourly_fxtime_str[i] = hourly_item["fxTime"].as<String>();

        _hourly_temp_int[i] = hourly_item["temp"].as<int>();              // "2", "1", "0", "0", "-2", "-3", "-3", "-4", "-4", ...
        _hourly_icon_int[i] = hourly_item["icon"].as<int>();              // "100", "100", "100", "150", "150", "150", "150", ...
        _hourly_text_str[i] = hourly_item["text"].as<String>();           // "晴", "晴", "晴", "晴", "晴", "晴", "晴", "晴", "晴", "晴", ...
        _hourly_wind360_int[i] = hourly_item["wind360"].as<int>();        // "335", "339", "341", "344", "349", "353", ...
        _hourly_winddir_str[i] = hourly_item["windDir"].as<String>();     // "西北风", "西北风", "西北风", "西北风", "西北风", "北风", ...
        _hourly_windscale_str[i] = hourly_item["windScale"].as<String>(); // "3-4", "3-4", "4-5", "4-5", "3-4", ...
        _hourly_windspeed_int[i] = hourly_item["windSpeed"] as<int>();    // "20", "24", "25", "25", "24", "22", ...
        _hourly_humidity_float[i] = hourly_item["humidity"].as<float>();  // "11", "11", "11", "12", "13", "14", "14", ...
        _hourly_pop_float[i] = hourly_item["pop"].as<float>();            // "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ...
        _hourly_precip_float[i] = hourly_item["precip"].as<float>();      // "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", ...
        _hourly_pressure_float[i] = hourly_item["pressure"].as<float>();  // "1025", "1025", "1026", "1025", "1025", ...
        _hourly_cloud_float[i] = hourly_item["cloud"].as<float>();        // "0", "0", "0", "0", "0", "0", "0", "0", "0", ...
        _hourly_dew_float[i] = hourly_item["dew"].as<float>();            // "-25", "-26", "-26", "-27", "-27", "-27", "-27", ...
        i++;
        if (i >= 24)
            break;
    }

    // JsonArray refer_sources = doc["refer"]["sources"];
    // const char *refer_sources_0 = refer_sources[0]; // "QWeather"
    // const char *refer_sources_1 = refer_sources[1]; // "NMC"
    // const char *refer_sources_2 = refer_sources[2]; // "ECMWF"

    // const char *refer_license_0 = doc["refer"]["license"][0]; // "commercial license"
}
String HourlyForecast::getFxtime(int index)
{
    return _hourly_fxtime_str[index % 24];
}
int HourlyForecast::getTemp(int index)
{
    return _hourly_temp_int[index % 24];
}

int HourlyForecast::getIcon(int index)
{
    return _hourly_icon_int[index % 24];
}
String HourlyForecast::getText(int index)
{
    return _hourly_text_str[index % 24];
}
int HourlyForecast::getWind360(int index)
{
    return _hourly_wind360_int[index % 24];
}
String HourlyForecast::getWindDir(int index)
{
    return _hourly_winddir_str[index % 24];
}

int HourlyForecast::getWindSpeed(int index)
{
    return _hourly_windspeed_int[index % 24];
}
float HourlyForecast::getHumidity(int index)
{
    return _hourly_humidity_float[index % 24];
}
float HourlyForecast::getPrecip(int index)
{
    return _hourly_precip_float[index % 24];
}
float HourlyForecast::getPop(int index)
{
    return _hourly_pop_float[index % 24];
}

float HourlyForecast::getPressure(int index)
{
    return _hourly_pressure_float[index % 24];
}
float HourlyForecast::getCloud(int index)
{
    return _hourly_cloud_float[index % 24];
}
float HourlyForecast::getDew(int index)
{
    return _hourly_dew_float[index % 24];
}
String HourlyForecast::getWindScale(int index)
{
    return _hourly_windscale_str[index % 24];
}
